<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scale = 0.5
randomize()
mile = 100
speeds = 20
scores = 0 

timee = 0

pause= false

modesel = pasvar.modsel
title = true
event_user(1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>title = false
event_user(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 30
if( !pause){
gcontrol.timee++
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>title</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch ( modesel){
case 0: //                         normal

if (scores &lt; maxscore){
if( scores &gt; mile){
if (speeds != 1){
speeds = speeds-1
}

mile = mile + 80

spawn.timer = 0
}
}else{
file = file_text_open_write("normal.pro")

if (scale &gt; 0.38 ){
scale = scale * (0.85)
}
maxscore = maxscore + 200
if (level mod(3) == 0){
maxstack++
}
stack = maxstack

file_text_write_real(file, scale)
file_text_write_real(file, 20)
file_text_write_real(file, 0)
file_text_write_real(file,level+1)
file_text_write_real(file,maxscore)
file_text_write_real(file,stack)
file_text_write_real(file,maxstack)
file_text_close(file)
room_restart()
}


break

case 1: //                        survive step
if(instance_exists(blocks)){
if (not(spawn.overflow or blocks.hit)){
if( scores &gt; mile){
if (speeds != 1){
speeds = speeds-1
}

mile = mile + 80

spawn.timer = 0

if (speeds &lt; maxspeed and flag){
stack = stack+1
flag = false
}
}
}else{
if(speeds &lt; maxspeed-2 and maxspeed &gt;2){
file = file_text_open_write("survival.pro")

if (scale &gt; 0.38){
scale = scale * (0.85)
}

if(maxspeed &gt;1){
maxspeed--
}

file_text_write_real(file, scale)
file_text_write_real(file, 20)
file_text_write_real(file, scores)
file_text_write_real(file,level+1)
file_text_write_real(file,maxspeed)
file_text_write_real(file,stack)
file_text_write_real(file,maxstack)
file_text_close(file)
room_restart()
}else{
game_restart()
}
}
}
break
case 2: //                          Time Attack

if (timee &lt; maxtime){
if( scores &gt; mile){
if (speeds != 1){
speeds = speeds-1
}

mile = mile + 180

spawn.timer = 0
}
}else{
file = file_text_open_write("Time.pro")

scale = 0.8-((2*((level)%3))/10)
speeds = 15 - ((2*((level)%3)))
if (((level)%3)==0 and level != 1){
maxtime = maxtime+30
}
if (level mod(3) == 0){
maxstack++
}
stack = maxstack

file_text_write_real(file, scale)
file_text_write_real(file, speeds)
file_text_write_real(file, 0)
file_text_write_real(file,level+1)
file_text_write_real(file,maxtime)
file_text_write_real(file,stack)
file_text_write_real(file,maxstack)
file_text_close(file)
room_restart()
}

break
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch ( modesel){
case 0:
if (!file_exists("normal.pro")){

scale = 1
speeds = 20
scores = 0
level = 1
maxscore = 100
stack = 1
maxstack = 1
titlestring = "Normal"
titlestat = "Level 1"

}else{


file = file_text_open_read("normal.pro")
scale = file_text_read_real(file)
speeds=file_text_read_real(file)
scores=file_text_read_real(file)
level=file_text_read_real(file)
maxscore=file_text_read_real(file)
stack=file_text_read_real(file)
maxstack=file_text_read_real(file)
file_text_close(file)

mile = scores + 100
titlestring = "Normal"
titlestat = "Level "+string(level)
}
break

case 1:                           //survive

if (!file_exists("survival.pro")){
scale = 1
speeds = 20
scores = 0
level = 1
maxspeed = 15
stack = 20
maxstack = 10
titlestring = "Survival"
titlestat = "Level 1"

}else{

file = file_text_open_read("survival.pro")
scale = file_text_read_real(file)
speeds=file_text_read_real(file)
scores=file_text_read_real(file)
level=file_text_read_real(file)
maxspeed=file_text_read_real(file)
stack=file_text_read_real(file)
maxstack=file_text_read_real(file)
file_text_close(file)
mile = scores + 80
titlestring = "Survival"
titlestat = "Level "+string(level)
}
flag = true

break
case 2://                      Time attack

if (!file_exists("Time.pro")){

scale = 1
speeds = 17
scores = 0
level = 1
maxtime = 30
stack = 1
maxstack = 1
titlestring = "Time Attack"
titlestat = "Level 1"
}else{


file = file_text_open_read("Time.pro")
scale = file_text_read_real(file)
speeds=file_text_read_real(file)
scores=file_text_read_real(file)
level=file_text_read_real(file)
maxtime=file_text_read_real(file)
stack=file_text_read_real(file)
maxstack=file_text_read_real(file)
file_text_close(file)

mile = scores + 100
titlestring = "Time Attack"
titlestat = "Level "+string(level)
}

break
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1]=30
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xc = window_get_width()/2
yc = window_get_height()/2
instance_create(xc, yc, man)
aspawn = instance_create(0,0, spawn)
topl = instance_create(0, spawn.maxheight, top)
topl.image_xscale = topl.image_xscale * xc
topl.image_yscale = topl.image_yscale * (yc/2)

botl =  instance_create(0, objground.y+64, top)
botl.image_xscale = botl.image_xscale * xc

instance_create(0,0,stackclear)
instance_create(0,0,ai)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (title){
draw_set_font(font)
draw_set_colour(c_black)
draw_set_halign(fa_center)
draw_set_valign(fa_top)
draw_text(window_get_width()/2,window_get_height()/2, titlestring)
draw_text(window_get_width()/2,(window_get_height()/2)+20, titlestat)
}else{    
    if( !pause){
    switch(modesel){
    case (0):
    draw_set_font(font)
    draw_set_colour(c_white)
    draw_set_halign(fa_right)
    draw_set_valign(fa_top)
    draw_text(window_get_width(),0, "Speed: "+string(speeds))
    draw_text(window_get_width(),20, "Level: "+string(level))
    draw_set_halign(fa_left)
    draw_set_valign(fa_top)
    draw_text(0,0,"Score: "+ string(gcontrol.scores))
    
    //draw_set_colour(c_black)
    draw_text(0,20,"Get: "+string(gcontrol.maxscore))
    draw_set_colour(c_white)
    draw_set_halign(fa_center)
    draw_set_valign(fa_top)
    draw_text((window_get_width())/2, 0, "Time: "+string(gcontrol.timee))
    draw_text((window_get_width())/2, 20, "Stack Clear: "+string(gcontrol.stack))
    break
    
    case (1): //                   survive
    draw_set_font(font)
    draw_set_colour(c_white)
    draw_set_halign(fa_right)
    draw_set_valign(fa_top)
    draw_text(window_get_width(),0, "Speed: "+string(speeds))
    draw_text(window_get_width(),20, "Level: "+string(level))
    draw_set_halign(fa_left)
    draw_set_valign(fa_top)
    draw_text(0,0,"Score: "+ string(gcontrol.scores))
    
    //draw_set_colour(c_black)
    draw_text(0,20,"Get: "+string(gcontrol.maxspeed))
    draw_set_colour(c_white)
    draw_set_halign(fa_center)
    draw_set_valign(fa_top)
    draw_text((window_get_width())/2, 0, "Time: "+string(gcontrol.timee))
    draw_text((window_get_width())/2, 20, "Stack Clear: "+string(gcontrol.stack))
    break
    
    case 2: //                   Time Attack
    
    draw_set_font(font)
    draw_set_colour(c_white)
    draw_set_halign(fa_right)
    draw_set_valign(fa_top)
    draw_text(window_get_width(),0, "Speed: "+string(speeds))
    draw_text(window_get_width(),20, "Level: "+string(level))
    draw_set_halign(fa_left)
    draw_set_valign(fa_top)
    draw_text(0,0,"Score: "+ string(gcontrol.scores))
    
    //draw_set_colour(c_black)
    draw_text(0,20,"Survive for: "+string(gcontrol.maxtime))
    draw_set_colour(c_white)
    draw_set_halign(fa_center)
    draw_set_valign(fa_top)
    draw_text((window_get_width())/2, 0, "Time: "+string(gcontrol.timee))
    draw_text((window_get_width())/2, 20, "Stack Clear: "+string(gcontrol.stack))
    
    break
    }
    }
    if (pause){
    draw_set_alpha(1)
    a=0.5
    draw_sprite(screen, -1, 0,0)
    for (i = 1; i &lt;2; i+=0.2){
    draw_set_alpha(a)
    draw_sprite(screen, -1, i,0)
    draw_sprite(screen, -1, -i,0)
    draw_sprite(screen, -1, 0,i)
    draw_sprite(screen, -1, 1,-i)
    a = a *0.8
    }
    draw_set_alpha(1)
    draw_sprite(pausee, -1, window_get_width()/2, window_get_height()/2)
    instance_deactivate_all(true)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (pause = false ){
pause = true
screen = sprite_create_from_surface(application_surface,0,0, window_get_width(), window_get_height(), false,false,0,0)
}else{
pause = false
sprite_delete(screen)
sprite_flush(pausee)

instance_activate_all()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
